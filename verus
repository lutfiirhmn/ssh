#!/usr/bin/python

import requests, json, os
from colorama import Fore, init as color_ama
color_ama(autoreset=True)

data = requests.get("https://luckpool.net/verus/miner/RHvyBq43am2Cfu6xp8tJzDUqj8Jsok5Byq")
data = json.loads(data.text)
hashrateSols = data["hashrateSols"]
hashrateString = data["hashrateString"]
immature = data["immature"]
balance = data["balance"]
paid = data["paid"]
worker1 = round(float(data["workers"][0].split(':')[1]) / 1000000, 2)
worker2 = round(float(data["workers"][1].split(':')[1]) / 1000000, 2)

if not os.path.exists("latestpool"):
	with open("latestpool", "w+") as f:
		f.write("{}")
	with open("latestpool", "r") as f:
		dataa = f.read()
	obj = json.loads(dataa)
	datae = {f"hashrateString":"", "hashrateSols":0, "immature":0, "balance":0, "paid":0}
	obj.update(data)
	
	with open("latestpool","w") as f:
		json.dump(obj, f, indent=4)

with open("latestpool", "r") as f:
	dataa = f.read()
obj = json.loads(dataa)

strings = ""

if hashrateSols > obj["hashrateSols"]:
	result = float(hashrateString.split(' ')[0]) - float(obj["hashrateString"].split(' ')[0])
	strings += f"\033[1mHashrate\t: {hashrateString}" + Fore.GREEN + f" ( +{round(float(result), 8)} MH )" + Fore.RESET + "\n"
elif hashrateSols < obj["hashrateSols"]:
	result = float(hashrateString.split(' ')[0]) - float(obj["hashrateString"].split(' ')[0])
	strings += f"\033[1mHashrate\t: {hashrateString}" + Fore.RED + f" ( {round(float(result), 8)} MH )" + Fore.RESET + "\n"
else:
	strings += f"\033[1mHashrate\t: {hashrateString}\n"
	
strings += f"\033[1m{data['workers'][0].split(':')[0]}\t: {worker1} MH\n"
strings += f"\033[1m{data['workers'][1].split(':')[0]}\t: {worker2} MH\n"
	
if immature > obj["immature"]:
	result = immature - obj["immature"]
	strings += Fore.YELLOW + f"\033[1mImmature\t: {immature} VRSC" + Fore.GREEN + f" ( +{round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
elif immature < obj["immature"]:
	result = immature - obj["immature"]
	strings += Fore.YELLOW + f"\033[1mImmature\t: {immature} VRSC" + Fore.RED + f" ( {round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
else:
	strings += Fore.YELLOW + f"\033[1mImmature\t: {immature} VRSC\n"
	
if balance > obj["balance"]:
	result = balance - obj["balance"]
	strings += Fore.BLUE + f"\033[1mBalances\t: {balance} VRSC" + Fore.GREEN + f" ( +{round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
elif balance < obj["balance"]:
	result = balance - obj["balance"]
	strings += Fore.BLUE + f"\033[1mBalances\t: {balance} VRSC" + Fore.RED + f" ( {round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
else:
	strings += Fore.BLUE + f"\033[1mBalances\t: {balance} VRSC\n"
	
if paid > obj["paid"]:
	result = paid - obj["paid"]
	strings += Fore.GREEN + f"\033[1mTotal Paid\t: {paid} VRSC" + Fore.GREEN + f" ( +{round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
elif balance < obj["balance"]:
	result = paid - obj["paid"]
	strings += Fore.GREEN + f"\033[1mTotal Paid\t: {paid} VRSC" + Fore.RED + f" ( {round(float(result), 8)} VRSC )" + Fore.RESET + "\n"
else:
	strings += Fore.GREEN + f"\033[1mTotal Paid\t: {paid} VRSC\n"

print(strings)
obj["hashrateSols"] = hashrateSols
obj["hashrateString"] = hashrateString
obj["immature"] = immature
obj["balance"] = balance
obj["paid"] = paid

obj.update(data)
    
with open("latestpool","w") as f:
	json.dump(obj, f, indent=4)
